import React, { useEffect, useState, useContext} from 'react';
import Modal from 'react-modal';
//import axios from 'axios';
import { Container, Header, Input, Button, DeleteButton, Sheet, AddEditWorkout, MessageItem, RestTimer } from '../styles/styles';
import { saveAs } from 'file-saver';

import { AppContext } from '../../App';

export const Workout = () => {
    const { workouts, setWorkouts, selectedWorkout, setSelectedWorkout, workoutModalIsOpen, setWorkoutModalIsOpen, 
        workoutName, setWorkoutName, editWorkout, setEditWorkout, setExercises, setSelectedExercise, exercises, 
     } = useContext(AppContext);
    
    // Initialize workouts for the app by fetching data from the backend
    useEffect(() => {
        const loadWorkouts = async () => {
          const response = await fetch('/api/workouts');
          // console.log(`loaded workouts response: ${response}`);
          const data = await response.json(); // returns the workouts from the database with the id (generated by database), title, and exercises
          // console.log(`loaded workouts data: ${data}`);
          if (data !== '404') {
            setWorkouts(data);
            setSelectedWorkout(data[data.length -1]); // set the last workouts as the current workouts
            setExercises(data[data.length -1].exercises); // set the exercises of the last workouts as the current exercises
            setSelectedExercise(data[data.length -1].exercises[0]); // set the first exercise of the last workouts as the current exercise
          } else {
            console.log(`No logs found.`);
          }
        };
        loadWorkouts();
        // console.log('workouts', workouts);
    }, []);

    // CRUD functions

  const openCloseWorkoutModal = (change) => {
    setWorkoutModalIsOpen(change); // true open, false close
  }

  // FIXME: Need to clean up and also set exercises when new workout is added
  const addWorkout = async () => {
    if (workouts.some(workout => workout.title === workoutName)) {
      alert('Workout already exists');
      return;
    }
    const workoutsData = { title: workoutName , exercises: exercises }; // we send an empty array of exercises to add to the workouts later
    const response = await fetch('/api/workouts', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(workoutsData),
    });
    const data = await response.json(); // checking to see if the response is ok
    if (response.ok) {
      alert('Workout Added!');
    }

     // Send a POST request to the add exercises endpoint for each exercise
     const newExercises = [];
     for (const exercise of exercises) {
       const exerciseResponse = await fetch(`/api/exercises/${data.id}`, {
         method: 'POST',
         headers: {
           'Content-Type': 'application/json',
         },
         body: JSON.stringify(exercise), // Include the workoutId in the request body
       });
       const newExercisesData = await exerciseResponse.json();
       newExercises.push(newExercisesData);
     }
 
     setSelectedWorkout({...data, exercises: newExercises}); // set the new workout as the selected workout
     setWorkouts(prev => [...prev, {...data, exercises: newExercises}]); // add the new workouts to the workouts array
     setWorkoutName(workoutName);
     setWorkoutModalIsOpen(false); // close the modal
     console.log('Exercises set to: ', exercises);
   };

    const updateWorkout = async (newWorkoutsData) => { // newWorkoutsData is the new data we want to update coming from the form
        console.log('newWorkoutsData', newWorkoutsData);
        let response = await fetch(`/api/workouts/${selectedWorkout.id}`, { 
        method: 'PUT', // use PUT to update the data instead of POST
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(newWorkoutsData),
        });
        let data = await response.json(); // check if the response is ok
        setSelectedWorkout(data); // set the new workout as the selected workout
        setWorkouts(prev => prev.map(workout => workout.id === data.id ? data : workout));

        // Update the exercises
        const updatedExercises = [];
        for (const exercise of exercises) {
        if (exercise.id) {
            const response = await fetch(`/api/exercises/${exercise.id}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(exercise),
            });
            const updatedExercise = await response.json();
            updatedExercises.push(updatedExercise);
        } else {
            const response = await fetch(`/api/exercises/${selectedWorkout.id}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(exercise),
            });
            const newExercise = await response.json();
            updatedExercises.push(newExercise);
        }
        }

        // Fetch the updated workout
        response = await fetch(`/api/exercises/${selectedWorkout.id}`);
        data = await response.json();

        if (Array.isArray(workouts)) {
        setWorkouts(prev => prev.map(workouts => workouts.id === data.id ? data : workouts)); // should update the workouts array with the new workout name 
        }

        setSelectedWorkout(prev => ({ ...prev, exercises: updatedExercises })); // update the selected workout with the new exercises
        setWorkoutModalIsOpen(false);
    }

  const deleteWorkout = async () => {
          console.log(`Selected workout id to delete: ${selectedWorkout.id}`);
          const confirmDelete = window.confirm('Are you sure you want to delete this workout?');

          if (!confirmDelete) {
            return;
          }

          await fetch(`/api/workouts/${selectedWorkout.id}`, {
            method: 'DELETE',
          });
      
          // Update the workouts state
          const newWorkouts = workouts.filter(workout => workout.id !== selectedWorkout.id);
          setWorkouts(newWorkouts);
      
          // Set the selectedWorkout state to the first workout in the workouts array
          if (newWorkouts.length > 0) {
            setSelectedWorkout(newWorkouts[0]);
          } else {
          setSelectedWorkout([{}]); 
          }
      
          // Close the modal
          setWorkoutModalIsOpen(false);
      };

    const handleCancelEditWorkout = () => {
        openCloseWorkoutModal(false);
        setExercises([{name: '', sets: '', reps: '', rest: ''}]);
    }

    const handleInput = (index, event) => {
        const values = [...exercises];
        values[index][event.target.name] = event.target.value;
        setExercises(values);
    };

    const handleFormSubmit = (e) => {
        e.preventDefault();
        if (editWorkout) {
            updateWorkout({ id: selectedWorkout.id, title: workoutName, exercises });
        } else {
            addWorkout();
        }
    };

    const addExercise = () => {
        setExercises([...exercises, { name: "", sets: "", reps: "", rest: "" }]);
      };
    
    const removeExercise = async (index) => {
      const newExercises = [...exercises];
      const removedExercise = newExercises.splice(index, 1)[0];
  
      if (newExercises.length === 0) {
        newExercises.push({ name: "", sets: "", reps: "", rest: "" });
      }
  
      if (removedExercise.id && selectedWorkout.exercises.find(exercise => exercise.id === removedExercise.id)) {
        await fetch(`/api/exercises/${removedExercise.id}`, {
          method: 'DELETE',
        });
      
        setSelectedWorkout(prev => ({
          ...prev,
          exercises: prev.exercises.filter(exercise => exercise.id !== removedExercise.id),
        }));
      }
  
      setExercises(newExercises);
    };

  return (
    <Modal isOpen={workoutModalIsOpen}>
        <h2>{editWorkout ? `Edit Workout: ${selectedWorkout.title}` : 'Add Workout'}</h2>
        <form onSubmit={handleFormSubmit}>
        <input
            type="text"
            name="title"
            value={editWorkout ? workoutName : null}
            onChange={e => setWorkoutName(e.target.value)}
            placeholder='Enter new workout name'
            required
        />
        <><p>Exercises: </p></>

        {exercises.map((exercise, index) => (
        <div key={index}>
            <input
            type="text"
            name="name"
            value={exercise.name}
            onChange={(event) => handleInput(index, event)}
            placeholder="Exercise"
            />
            <input
            type="number"
            name="sets"
            value={exercise.sets}
            onChange={(event) => handleInput(index, event)}
            placeholder="Sets"
            />
            <input
            type="number"
            name="reps"
            value={exercise.reps}
            onChange={(event) => handleInput(index, event)}
            placeholder="Reps"
            />
            <input
            type="number"
            name="rest"
            value={exercise.rest}
            onChange={(event) => handleInput(index, event)}
            placeholder="Rest"
            />
        <button type="button" onClick={addExercise}>+</button>
        <button type="button" onClick={() => removeExercise(index)}>-</button>
        </div>
        ))}

        <div>
            <> </>
            <Button type="submit">{editWorkout ? 'Update' : 'Add Workout'}</Button>
            {editWorkout ? <DeleteButton type="button" onClick={deleteWorkout}>Delete</DeleteButton> : null}
            <Button type="button" onClick={handleCancelEditWorkout}>Cancel</Button>
        </div>
    </form>
    </Modal>
  )
}
